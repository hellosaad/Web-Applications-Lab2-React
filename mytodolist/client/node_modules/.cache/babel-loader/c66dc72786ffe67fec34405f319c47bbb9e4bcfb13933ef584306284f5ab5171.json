{"ast":null,"code":"var _jsxFileName = \"/Users/saadmohammedkhaled/Desktop/Web_Applications/lab2/Web-Applications-Lab2/mytodolist/client/src/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { StateContext } from \"./contexts\";\nimport { useResource } from \"react-request-hook\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  _s();\n  const {\n    dispatch\n  } = useContext(StateContext);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  // Define the useResource hook for getting users to simulate login\n  const [usersResult, getUsers] = useResource(() => ({\n    url: \"http://localhost:4000/login\",\n    method: \"post\"\n  }));\n\n  // Call getUsers on component mount to get the list of users\n  useEffect(() => {\n    getUsers();\n  }, [getUsers]);\n  function handleEmail(evt) {\n    setEmail(evt.target.value);\n  }\n  function handlePassword(evt) {\n    setPassword(evt.target.value);\n  }\n  function handleSubmit(e) {\n    e.preventDefault();\n    // Simulate the login by checking if user exists and password matches\n    const user = usersResult.data.find(user => user.email === email);\n    if (user && user.password === password) {\n      // In a real app, password should be hashed and checked on the server side\n      dispatch({\n        type: \"LOGIN\",\n        username: email\n      });\n      // Redirect or perform further actions on successful login\n    } else {\n      alert(\"Login failed: Incorrect email or password.\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"login-email\",\n      children: \"Email:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      name: \"login-email\",\n      id: \"login-email\",\n      value: email,\n      onChange: handleEmail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"login-password\",\n      children: \"Password:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      name: \"login-password\",\n      id: \"login-password\",\n      value: password,\n      onChange: handlePassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Login\",\n      disabled: !email || !password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"xg6JQXfaRxi/AUE1y3HNOQBEH5E=\", false, function () {\n  return [useResource];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useContext","useEffect","StateContext","useResource","jsxDEV","_jsxDEV","Login","_s","dispatch","email","setEmail","password","setPassword","usersResult","getUsers","url","method","handleEmail","evt","target","value","handlePassword","handleSubmit","e","preventDefault","user","data","find","type","username","alert","onSubmit","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","name","id","onChange","disabled","_c","$RefreshReg$"],"sources":["/Users/saadmohammedkhaled/Desktop/Web_Applications/lab2/Web-Applications-Lab2/mytodolist/client/src/Login.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { StateContext } from \"./contexts\";\nimport { useResource } from \"react-request-hook\";\n\nexport default function Login() {\n  const { dispatch } = useContext(StateContext);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  // Define the useResource hook for getting users to simulate login\n  const [usersResult, getUsers] = useResource(() => ({\n    url: \"http://localhost:4000/login\",\n    method: \"post\",\n  }));\n\n  // Call getUsers on component mount to get the list of users\n  useEffect(() => {\n    getUsers();\n  }, [getUsers]);\n\n  function handleEmail(evt) {\n    setEmail(evt.target.value);\n  }\n\n  function handlePassword(evt) {\n    setPassword(evt.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    // Simulate the login by checking if user exists and password matches\n    const user = usersResult.data.find((user) => user.email === email);\n    if (user && user.password === password) {\n      // In a real app, password should be hashed and checked on the server side\n      dispatch({ type: \"LOGIN\", username: email });\n      // Redirect or perform further actions on successful login\n    } else {\n      alert(\"Login failed: Incorrect email or password.\");\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"login-email\">Email:</label>\n      <input\n        type=\"email\"\n        name=\"login-email\"\n        id=\"login-email\"\n        value={email}\n        onChange={handleEmail}\n      />\n      <label htmlFor=\"login-password\">Password:</label>\n      <input\n        type=\"password\"\n        name=\"login-password\"\n        id=\"login-password\"\n        value={password}\n        onChange={handlePassword}\n      />\n      <input type=\"submit\" value=\"Login\" disabled={!email || !password} />\n    </form>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}